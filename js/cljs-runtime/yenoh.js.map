{"version":3,"sources":["yenoh.cljc"],"mappings":";AA6CA,AAAKA,qBACH,4DAAA,4jEAAA,8DAAA,KAAA,0EAAA,rwEAACC;AAkEH,sBAAA,tBAAMC,oDAAYC;AAAlB,AACE,IAAMC,MAAI,AAACC,gBAAM,AAACC,+CAAWH;AAA7B,AACE,QAACH,mDAAAA,wDAAAA,PAAaI,oCAAAA;;AAElB,sBAAA,tBAAMG,oDAAYC;AAAlB,AACE,IAAMJ,MAAI,yDAAA,2CAAA,0DAAA,9JAACE,+CAAWE;AAAtB,AACE,2BAAA,gBAAIJ,hBAAIC,pBAAMI;;AAKlB,GAAA,QAAAC,kCAAAC;AAAA;AAAA,AAAA,aAAA,iBAAAC,6BAAA,AAAAC,6CAAA,xGAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,QAAA,wBAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,rLAAeX;;;AAEf,AAAAiB,uDAAA,yDAAA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAA0BE;kBAA1B,AAAAD,4CAAAD,WAAA,IAAA,zEAA4BG;aAA5B,AAAAF,4CAAAD,WAAA,IAAA,pEAAwCI;AAAxC,AACE,OAACC,8CAAMC,gBAAMH,YAAYC;;AAE3B,AAAAN,uDAAA,oEAAA,WAAAS;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAA9B,gBAAA4B;IAAAA,iBAAA,AAAAG,eAAAH;QAAAE,JAA+BT;WAA/BO,PAAmCI;AAAnC,AAAA,kDAAA,yDACW,AAACC,cAAID;;AAEhB,AAAAf,uDAAA,wEAAA,WAAAiB;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAP,cAAAM;IAAAE,eAAA,AAAArC,gBAAAoC;IAAAA,iBAAA,AAAAL,eAAAK;QAAAC,JAAkChB;WAAlCe,PAAsCJ;AAAtC,AACE,IAAAM,WAAM,AAACE,gBAAMR;AAAb,AAAA,QAAAM;KAAA;AAGE,OAACtC,gBAAMgC;;;KAHT;AAOE,IAAAS,aAAqBT;SAArB,AAAAZ,4CAAAqB,WAAA,IAAA,hEAAOC;UAAP,AAAAtB,4CAAAqB,WAAA,IAAA,jEAAUE;YAAV,AAAAvB,4CAAAqB,WAAA,IAAA,nEAAcG;AAAd,AAAA,0FACGF,GAAGE;;;;AARR,MAAA,KAAAL,MAAA,CAAA,mEAAAD;;;;AAUF,AAAArB,uDAAA,oEAAA,WAAA4B;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAzB,4CAAA0B,WAAA,IAAA,/DAA+BzB;SAA/B,AAAAD,4CAAA0B,WAAA,IAAA,hEAAiCJ;AAAjC,AACE,OAACK,gDAAQL;;AAEX,AAAAzB,uDAAA,kEAAA,WAAA+B;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAArB,cAAAoB;IAAAE,eAAA,AAAAnD,gBAAAkD;IAAAA,iBAAA,AAAAnB,eAAAmB;QAAAC,JAA8B9B;WAA9B6B,PAAkClB;AAAlC,AACE,IAAAoB,WAAM,AAACZ,gBAAMR;AAAb,AAAA,QAAAoB;KAAA;AAGE,OAACpD,gBAAMgC;;;KAHT;AAOE,IAAAqB,aAAgBrB;SAAhB,AAAAZ,4CAAAiC,WAAA,IAAA,hEAAOC;YAAP,AAAAlC,4CAAAiC,WAAA,IAAA,nEAAUhC;SAAV,AAAAD,4CAAAiC,WAAA,IAAA,hEAAYX;AAAZ,AACE,OAACK,gDAAQ,oBAAA,nBAAK,AAACQ,eAAKD,QAAQ,AAACC,eAAKb;;;;AARtC,MAAA,KAAAH,MAAA,CAAA,mEAAAa;;;;AAUF,AAAAnC,uDAAA,+DAAA,WAAAuC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA7B,cAAA4B;IAAAE,eAAA,AAAA3D,gBAAA0D;IAAAA,iBAAA,AAAA3B,eAAA2B;QAAAC,JAA6BtC;WAA7BqC,PAAiC1B;AAAjC,AACE,IAAA4B,aAA2B5B;IAA3B6B,aAAA,AAAAzC,4CAAAwC,WAAA,IAAA;YAAA,AAAAxC,4CAAAyC,WAAA,IAAA,nEAAQxC;UAAR,AAAAD,4CAAAyC,WAAA,IAAA,jEAAUE;SAAV,AAAA3C,4CAAAwC,WAAA,IAAA,hEAAeI;IAAfF,aAAA,AAAA1C,4CAAAwC,WAAA,IAAA;YAAA,AAAAxC,4CAAA0C,WAAA,IAAA,nEAAmBzC;UAAnB,AAAAD,4CAAA0C,WAAA,IAAA,jEAAqBG;AAArB,AAAA,0FACG,iBAAAC,WAAMF;AAAN,AAAA,QAAAE;KAAA;AAAA;;;;AAAA,MAAA,KAAA3B,MAAA,CAAA,mEAAA2B;;;KACUH,IAAIE;;AAEnB,AAAAhD,uDAAA,oEAAA,WAAAkD;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA/C,4CAAAgD,WAAA,IAAA,/DAAgC/C;SAAhC,AAAAD,4CAAAgD,WAAA,IAAA,hEAAkCC;WAAlC,AAAAjD,4CAAAgD,WAAA,IAAA,lEAAqCE;SAArC,AAAAlD,4CAAAgD,WAAA,IAAA,hEAA0CG;WAA1C,AAAAnD,4CAAAgD,WAAA,IAAA,lEAA6CI;AAA7C,AACE,IAAMC,YAAU,iBAAAC,WAAM,AAACC,iBAAOL;AAAd,AAAA,QAAAI;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAnC,MAAA,CAAA,mEAAAmC;;;;AAAhB,AAAA,0FAGGD,UAAUJ,GAAGE,GAAGC;;AAErB,AAAAvD,uDAAA,8EAAA,WAAA2D;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAjD,cAAAgD;IAAAE,eAAA,AAAA/E,gBAAA8E;IAAAA,iBAAA,AAAA/C,eAAA+C;QAAAC,JAAoC1D;WAApCyD,PAAwC9C;AAAxC,AACE,IAAAgD,WAAM,AAACxC,gBAAMR;AAAb,AAAA,QAAAgD;KAAA;AAEI,OAACjC,gDAAQ,AAAC/C,gBAAMgC;;;KAFpB;AAII,OAACe,gDAAQ,AAAC4B,iBAAO3C;;;;AAJrB,MAAA,KAAAO,MAAA,CAAA,mEAAAyC;;;;AAMF,AAAA/D,uDAAA,gEAAA,WAAAgE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA7D,4CAAA8D,WAAA,IAAA,/DAA8B7D;SAA9B,AAAAD,4CAAA8D,WAAA,IAAA,hEAAgC5B;AAAhC,AACE,OAACP,gDAAQO;;AAEX,AAAArC,uDAAA,gEAAA,WAAAkE;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAxD,cAAAuD;IAAAE,eAAA,AAAAtF,gBAAAqF;IAAAA,iBAAA,AAAAtD,eAAAsD;QAAAC,JAA6BjE;WAA7BgE,PAAiCrD;AAAjC,AACE,OAACC,cAAID;;AAEP,sBAAA,tBAAMuD,oDAAeC;;AAArB,AACE,GAEE,iBAAAC,hBAAUD;AAFZ,kDAAA,qDAAA,mFAGUA;;AAHV,GAKE,AAACE,wBAAQF;AACT,IAAAG,WAAM,AAACnD,gBAAMgD;AAAb,AAAA,QAAAG;KAAA;AAGE,eAAO,AAAC3F,gBAAMwF;;;;;KAHhB;AAAA,kDAAA,qDAAA,mFAOUA;;;KAPV;AAWE,IAAAI,aAAkCJ;gBAAlC,AAAApE,4CAAAwE,WAAA,IAAA,vEAAOnB;SAAP,AAAArD,4CAAAwE,WAAA,IAAA,hEAAiBvB;SAAjB,AAAAjD,4CAAAwE,WAAA,IAAA,hEAAoBrB;gBAApB,AAAAnD,4CAAAwE,WAAA,IAAA,vEAAuBC;AAAvB,AACE,OAACC,+CAAO,CAACP,oDAAAA,wDAAAA,NAAclB,oCAAAA,KAAII,UAAU,4DAAA,5DAACsB,6CAAKC,iDAASzB,GAAGsB;;;;AAZ3D,MAAA,KAAAtD,MAAA,CAAA,mEAAAoD;;;;AANF;;;;;;AAqBF,AAAA1E,uDAAA,kEAAA,WAAAgF;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA7E,4CAAA8E,WAAA,IAAA,/DAA+B7E;YAA/B,AAAAD,4CAAA8E,WAAA,IAAA,nEAAiCC;aAAjC,AAAA/E,4CAAA8E,WAAA,IAAA,pEAAuC3E;AAAvC,AACE,OAACgE,oBAAchE;;AAEjB,AAAAN,uDAAA,iEAAA,WAAAmF;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAzE,cAAAwE;IAAAE,eAAA,AAAAvG,gBAAAsG;IAAAA,iBAAA,AAAAvE,eAAAuE;QAAAC,JAA8BlF;WAA9BiF,PAAkCtE;AAAlC,AACEA;;AAEF,AAAAf,uDAAA,4DAAA,WAA0BuE;AAA1B,AACE,IAAAgB,aAAmBhB;IAAnBiB,aAAA,AAAA5E,cAAA2E;IAAAE,eAAA,AAAA1G,gBAAAyG;IAAAA,iBAAA,AAAA1E,eAAA0E;UAAAC,NAAOC;WAAPF,PAAazE;AAAb,AAEE,oBAAI,iBAAA4E,eAAA;AAAA,AAAA,QAAAA,6CAAAA,kDAAAA,PAAKD,8BAAAA;;AACP3E;;AACAwD;;;AAGN,sBAAA,tBAAMqB,oDAAYC;AAAlB,AACE,OAACC,sBAAS,WAAKC;AAAL,AACE,GAAI,AAACtB,wBAAQsB;AACX,OAAC/F,yCAAK+F;;AACNA;;GACJF;;AAIZ","names":["yenoh/parse-select","instaparse.core.parser","yenoh/honey->ast","q","sql","cljs.core/first","honey.sql.format","yenoh/honey->sql","honey","clojure.string/trim","js/yenoh","js/yenoh.emit","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__42897","cljs.core/MultiFn","cljs.core.symbol","yenoh/emit","p__42898","vec__42899","cljs.core.nth","_","select-list","tables","cljs.core.apply","cljs.core/merge","p__42902","vec__42903","seq__42904","cljs.core/seq","first__42905","cljs.core/next","args","cljs.core/vec","p__42906","vec__42907","seq__42908","first__42909","G__42910","js/Error","cljs.core/count","vec__42911","cn","_as","alias","p__42914","vec__42915","cljs.core.keyword","p__42918","vec__42919","seq__42920","first__42921","G__42922","vec__42923","tn","cljs.core/name","p__42926","vec__42927","seq__42928","first__42929","vec__42930","vec__42933","vec__42936","lhs","op","rhs","G__42939","p__42940","vec__42941","t1","type","t2","spec","join-type","G__42944","cljs.core/second","p__42945","vec__42946","seq__42947","first__42948","G__42949","p__42950","vec__42951","p__42954","vec__42955","seq__42956","first__42957","yenoh/flatten-joins","node","cljs.core/Keyword","cljs.core/vector?","G__42958","vec__42959","join-spec","cljs.core.update","cljs.core.fnil","cljs.core/conj","p__42962","vec__42963","_from","p__42966","vec__42967","seq__42968","first__42969","vec__42970","seq__42971","first__42972","tag","fexpr__42973","yenoh/ast->honey","ast","clojure.walk/postwalk","v"],"sourcesContent":["(ns yenoh\n  (:require [honey.sql :as sql]\n            [clojure.walk :refer [postwalk]]\n            #?(:clj  [instaparse.core :as insta :refer [defparser]]\n               :cljs [instaparse.core :as insta :refer-macros [defparser]])))\n\n\n\"\" \"\n;; mysql 8.0 select spec\n\nSELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    [HIGH_PRIORITY]\n    [STRAIGHT_JOIN]\n    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n    select_expr [, select_expr] ...\n    [into_option]\n    [FROM table_references\n      [PARTITION partition_list]]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [WINDOW window_name AS (window_spec)\n        [, window_name AS (window_spec)] ...]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [into_option]\n    [FOR {UPDATE | SHARE}\n        [OF tbl_name [, tbl_name] ...]\n        [NOWAIT | SKIP LOCKED]\n      | LOCK IN SHARE MODE]\n    [into_option]\n\ninto_option: {\n    INTO OUTFILE 'file_name'\n        [CHARACTER SET charset_name]\n        export_options\n  | INTO DUMPFILE 'file_name'\n  | INTO var_name [, var_name] ...\n}\n\" \"\"\n\n;;; https://ronsavage.github.io/SQL/sql-92.bnf.html#query%20specification\n(def parse-select\n  (insta/parser\n    \"\n    select                := <'SELECT'> set_quantifier? select_list table_expr\n    set_quantifier        := 'ALL' | 'DISTINCT'\n\n    select_list           := '*' | ( select_sublist (<comma> select_sublist)* )\n      <select_sublist>      := derived_column | qualifier '.' '*'\n      derived_column        := column_ref as_clause?\n\n      <as_clause>           := 'AS'? column_name\n\n      column_ref            := (qualifier '.')? column_name\n      column_name           := identifier\n\n\n    table_expr            := from_clause\n      from_clause           := 'FROM' table_ref (comma table_ref)*\n      table_ref             := table_name correlation_spec? | joined_table\n\n      correlation_spec      := 'AS'? identifier\n\n      (* qualified join only *)\n      joined_table          := table_ref join_type? <'JOIN'> table_ref join_spec?\n      join_type           := 'INNER' | ('LEFT' | 'RIGHT' | 'FULL') 'OUTER'?\n\n      (* 'USING' is not supported' *)\n      join_spec             := <'ON'> boolean_term\n\n      table_name            := identifier\n\n    <boolean_term>        := boolean_factor\n      <boolean_factor>        := 'NOT'? predicate\n\n      <predicate>           := comparison_pred\n      (*                     | between_pred\n                             | in_pred\n                             | like_pred\n                             | null_pred\n                             | exists_pred\n      *)\n      <comparison_pred>     := value_expr comp_op value_expr\n      <comp_op>             := '=' | '<>' | '<' | '>' | '<=' | '>='\n\n    (* \uac1c\ubbf8\uc9c0\uc625\uc774\ub2e4... *)\n    value_expr           := numeric_value_expr  | string_value_expr\n\n      <numeric_value_expr>    := #\\\"\\\\d+\\\"\n      <string_value_expr>     := character_value_expr\n\n      <character_value_expr>  := value_expr_primary\n\n      <value_expr_primary>    := column_ref\n\n\n    <qualifier>           := table_name\n    (* regular identifier *)\n    <identifier>          := #\\\"[a-zA-Z_]+\\\"\n\n    <comma>               := ','\n    \"\n\n    ;:output-format :enlive\n    :string-ci true\n    :auto-whitespace :standard))\n\n\n(defn honey->ast [q]\n  (let [sql (first (sql/format q))]\n    (parse-select sql)))\n\n(defn honey->sql [honey]\n  (let [sql (sql/format honey {:pretty true})]\n    (-> sql first clojure.string/trim)))\n\n\n;;; emit\n\n(defmulti emit first)\n\n(defmethod emit :select [[_ select-list tables]]\n  (apply merge select-list tables))\n\n(defmethod emit :select_list [[_ & args]]\n  {:select (vec args)})\n\n(defmethod emit :derived_column [[_ & args]]\n  (case (count args)\n    ;; without alias\n    1\n    (first args)\n\n    ;; with alias\n    3\n    (let [[cn _as alias] args]\n      [cn alias])))\n\n(defmethod emit :column_name [[_ cn]]\n  (keyword cn))\n\n(defmethod emit :column_ref [[_ & args]]\n  (case (count args)\n    ;; unqualified\n    1\n    (first args)\n\n    ;; qualified\n    3\n    (let [[tn _ cn] args]\n      (keyword (str (name tn) \".\" (name cn))))))\n\n(defmethod emit :join_spec [[_ & args]]\n  (let [[[_ lhs] op [_ rhs]] args]\n    [(case op\n       \"=\" :=) lhs rhs]))\n\n(defmethod emit :joined_table [[_ t1 type t2 spec]]\n  (let [join-type (case (second type)\n                    \"INNER\" :join\n                    \"LEFT\" :left-join)]\n    [join-type t1 t2 spec]))\n\n(defmethod emit :correlation_spec [[_ & args]]\n  (case (count args)\n    ;; without as\n    1 (keyword (first args))\n    ;; with as\n    2 (keyword (second args))))\n\n(defmethod emit :table_name [[_ tn]]\n  (keyword tn))\n\n(defmethod emit :table_ref [[_ & args]]\n  (vec args))\n\n(defn flatten-joins [node]\n  (cond\n    ;; table without alias\n    (keyword? node)\n    {:from [node]}\n\n    (vector? node)\n    (case (count node)\n      ;; nested join\n      1\n      (recur (first node))\n\n      ;; table with alias\n      2\n      {:from [node]}\n\n      ;; flatten\n      4\n      (let [[join-type t1 t2 join-spec] node]\n        (update (flatten-joins t1) join-type (fnil conj []) t2 join-spec)))\n    ))\n\n(defmethod emit :from_clause [[_ _from tables]]\n  (flatten-joins tables))\n\n(defmethod emit :table_expr [[_ & args]]\n  args)\n\n(defmethod emit :default [node]\n  (let [[tag & args] node]\n    ;(println \"skipping \" tag)\n    (if (#{} tag)\n      args\n      node)))\n\n\n(defn ast->honey [ast]\n  (postwalk (fn [v]\n              (if (vector? v)\n                (emit v)\n                v))\n            ast))\n\n\n\n(comment\n\n  (let [q   {:select    [:bsa.id\n                         [:fmc.code_name :offline_market_name]]\n             :from      [[:bulk_sale_applications :bsa]]\n             :left-join [[:bulk_sale_market_sales_info :bsmsi] [:= :bsmsi.bulk_sale_application_id :bsa.id]\n                         [:farm_market_codes :fmc] [:= :fmc.id :bsmsi.farm_market_code_id]]}\n        ast (honey->ast q)]\n    (postwalk (fn [v]\n                ;(println \"VISIT\" v)\n                (let [e (if (vector? v)\n                          (emit v)\n                          v)]\n                  ;(println \"EMIT\" e)\n                  e)\n                ) ast))\n\n  (let [q   {:select    [:bsa.id\n                         :bsa.created_at\n                         :bsa.progress\n                         :pcc.gl_crop_name\n                         :pcc.code_name_new\n                         :bsc.estimated_purchase_price_min\n                         :bsc.estimated_purchase_price_max\n                         :bsc.preferred_grade\n                         :bsc.preferred_quantity\n                         :bsc.estimated_seller_earning_rate\n                         :u.name\n                         :u.phone_num\n                         :u.region\n                         :ubri.number\n                         :ubri.type\n                         :ubsi.experience_year_type\n                         [:fmc.code_name :offline_market_name]\n                         :ubsi.lastyear_income\n                         [:bsosi.market :online_market_name]\n                         :bsosi.url\n                         [:dc.name :delivery_company_name]]\n             :from      [[:bulk_sale_applications :bsa]]\n             :join      [[:bulk_sale_campaigns :bsc] [:= :bsa.bulk_sale_campaign_id :bsc.id]\n                         [:product_category_code :pcc] [:= :bsc.product_category_code_id :pcc.id]\n                         [:user_business_support_info :ubsi] [:= :bsa.user_business_support_info_id :ubsi.id]\n                         [:user_business_registration_info :ubri] [:= :ubsi.user_id :ubri.user_id]\n                         [:users :u] [:= :ubsi.user_id :u.id]]\n             :left-join [[:bulk_sale_online_sales_info :bsosi] [:= :bsosi.bulk_sale_application_id :bsa.id]\n                         [:delivery_companies :dc] [:= :dc.id :bsosi.delivery_company_id]\n                         [:bulk_sale_market_sales_info :bsmsi] [:= :bsmsi.bulk_sale_application_id :bsa.id]\n                         [:farm_market_codes :fmc] [:= :fmc.id :bsmsi.farm_market_code_id]]}\n\n        ast (honey->ast q)]\n    #_(ast->honey ast)\n    ;ast\n\n    ))"]}